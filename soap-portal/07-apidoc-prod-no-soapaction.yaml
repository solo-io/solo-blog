apiVersion: portal.gloo.solo.io/v1beta1
kind: APIDoc
metadata:
  name: world-cities-schema
  namespace: default
spec:
  ## specify the type of schema provided in this APIDoc.
  ## openApi is only option at this time.
  openApi:
    content:
      # we use a fetchUrl here to tell the Gloo Portal
      # to fetch the schema contents directly from the petstore service.
      # 
      # configmaps and inline strings are also supported.
      fetchUrl: https://raw.githubusercontent.com/jameshbarton/solo-resources/main/world-cities-soap/lib/world-cities-openapi-no-soapaction.json
---
apiVersion: portal.gloo.solo.io/v1beta1
kind: APIProduct
metadata:
  name: world-cities-product
  namespace: default
  labels:
    app: world-cities
spec:
  displayInfo: 
    description: World Cities Product
    title: World Cities Product
    
  # Specify one or more version objects that will each include a list
  # of APIs that compose the version and routing for the version  
  versions:
  - name: v1
    apis:
    # Specify the API Doc(s) that will be included in the Product
    # each specifier can include a list of individual operations
    # to import from the API Doc.
    #
    # If none are listed, all the 
    # operations will be imported from the doc. 
    - apiDoc:
        name: world-cities-schema
        namespace: default
  
    # Each imported operation must have a 'route' associated with it.
    # Here we define a route that will be used by default for all the selected APIProduct version operations.
    # You can also set overrides for this route on each individual operation.
    # A route must be provided for every Operation to enable routing for an API Product.  
    gatewayConfig:
      route:
        inlineRoute:
          backends:
          - upstream:
              name: default-world-cities-soap-service-8080
              namespace: gloo-system
          options:
            autoHostRewrite: true
            stagedTransformations:
              early:
                requestTransforms:
                  - requestTransformation:
                      transformationTemplate:
                        headers:
                          SOAPAction:
                            text: 'findCity'
              regular: 
                requestTransforms:
                  - requestTransformation:
                      xsltTransformation:
                        xslt: |
                          <?xml version="1.0" encoding="UTF-8"?>
                            <xsl:stylesheet
                            xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                            xmlns:math="http://www.w3.org/2005/xpath-functions/math"
                            xmlns:xs="http://www.w3.org/2001/XMLSchema"
                            exclude-result-prefixes="xs math" version="3.0">
                              <xsl:output indent="yes" omit-xml-declaration="yes" />
                              <xsl:strip-space elements="*"/>
                              <xsl:template match="/" xmlns="http://schemas.xmlsoap.org/soap/envelope/">
                                <Envelope >
                                  <Header/>
                                  <Body>
                                    <Query>
                                      <xsl:apply-templates select="json-to-xml(.)/*"/>
                                    </Query>
                                  </Body>
                                </Envelope>
                              </xsl:template>
                              <xsl:template match="map" xpath-default-namespace="http://www.w3.org/2005/xpath-functions"
                              xmlns:web="http://www.qas.com/OnDemand-2011-03">
                                <CityQuery><xsl:value-of select="string[@key='cityQuery']" /></CityQuery>
                              </xsl:template>
                            </xsl:stylesheet>
                        nonXmlTransform: true
                        setContentType: text/xml
                    responseTransformation:
                      xsltTransformation:
                        xslt: |
                          <?xml version="1.0" encoding="UTF-8"?>
                          <xsl:stylesheet
                          xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                          xmlns:xs="http://www.w3.org/2001/XMLSchema"
                          xpath-default-namespace="http://schemas.xmlsoap.org/soap/envelope/"
                          version="3.0">
                            <xsl:output method="text" omit-xml-declaration="yes" />
                            <xsl:variable name="myMap">
                              <map xmlns="http://www.w3.org/2005/xpath-functions">
                                <array key="matches" >
                                  <xsl:for-each select="/Envelope/Body/Content/Match">
                                    <map>
                                      <string key="city"><xsl:value-of select="City"/></string>
                                      <string key="country"><xsl:value-of select="Country" /></string>
                                      <string key="subCountry"><xsl:value-of select="SubCountry" /></string>
                                      <string key="geoNameId"><xsl:value-of select="GeoNameId" /></string>
                                    </map>
                                  </xsl:for-each>
                                </array>
                              </map>
                            </xsl:variable>
                            <xsl:template match="/">
                              <xsl:apply-templates select="xml-to-json($myMap, map{'indent': true()})" />
                            </xsl:template>
                          </xsl:stylesheet>
                        setContentType: application/json    
    # You can add arbitrary tags to an APIProduct version. 
    # Users will be able to search for APIs based on the available tags when they log into a portal application.
    tags:
      stable: {}